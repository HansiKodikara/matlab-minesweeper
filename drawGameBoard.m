% Purpose: Sets up the Minesweeper game window and initializes the game
% Parameters: gridSize – number of rows and columns, numMines - number of mines to place in the game
% Return values: gameBoard – matrix that store the visibility state of each cell (hidden, revealed, flagged)

function gameBoard = drawGameBoard(gridSize,numMines)
    % Set the number of rows and columns for a square grid
    numRows = gridSize;
    numCols = gridSize;
    
    % Create game board with all cells initially hidden
    gameBoard = zeros(numRows,numCols); % 0 = hidden
    % initialize empty minefield
    minefield = [];
    
    % Create the main game figure
    % Source: https://au.mathworks.com/help/matlab/ref/figure.html#bvjs6cb-3
    figure("Name","Minesweeper","NumberTitle","off","Resize","off",ToolBar="none");

    % Create checkerboard pattern using matrix addition and mod logic
    % Source: https://au.mathworks.com/matlabcentral/answers/356307-how-to-create-a-checkerboard-matrix-without-inbuilt-function#comment_998071
    checkerMatrix = mod((1:numRows)' + (1:numCols), 2);
    
    % Display the checkerboard grid with color map and remove axes
    imagesc(checkerMatrix);
    colormap([0.75 0.85 0.95; 0.60 0.75 0.90]);
    axis equal tight off;
    
    % Add main instructions as the figure title
    title("Left-click to reveal | Right-click to flag ⚑",FontSize=16);
    
    % Display flag count on the left side of the board
    text(-1,gridSize/2,sprintf("⚑ %i",numMines), ...
        FontSize=20, ...
        FontWeight="bold", ...
        HorizontalAlignment="center", ...
        Color=[1 0 0]);
    
    % Store all game data in figure's UserData to access them in other
    % functions without passing them as parameters
    set(gcf, "UserData", struct("minefield", minefield, ...
        "gameBoard", gameBoard, ...
        "gridSize", numCols, ...
        "firstClickDone",false, ...
        "numMines",numMines, ...
        "gameOver",false, ...
        "flagsRemaining",numMines));
 
    % Create a button that reopens instructions
    uicontrol(Style="pushbutton", ...
        Parent=gcf, ...
        String="How to play", ...
        FontSize=12, ...
        Units="normalized", ...
        Position=[0.85 0.92 0.12 0.05], ...
        Callback=@(~,~) showInstructions(false), ...
        BackgroundColor=[0.75 0.85 0.95]);
    
    % Create a button that goes back to difficulty selection
    uicontrol(Style="pushbutton", ...
        Parent=gcf, ...
        String="Restart", ...
        Units="normalized", ...
        Position=[0.03 0.92 0.12 0.05], ...
        BackgroundColor=[1 0.7 0.7], ...
        Callback=@(~,~) restartGame(gcf));    

    % set up mouse click interactions
    set(gcf, "WindowButtonDownFcn", @handleClick);

end